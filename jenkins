@Library('jenkins-shared-lib@main') _

pipeline {
    agent {label 'local-agent'}

    environment {
        SONARQUBE = 'SonarQube-Local'
	    DOCKERHUB_CREDENTIALS = 'docker-jenkins-token'
	    IMAGE_NAME = 'ayoobki/maven-app' 
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/Ayoobkibrahim/maven-project.git', branch: 'main'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Unit Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Code Analysis') {
            steps {
                withSonarQubeEnv("SonarQube-Local") {
                    sh 'mvn sonar:sonar -Dsonar.projectKey=maven-project'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script{
                    timeout(time: 2, unit: 'MINUTES') {
                    def qg = waitForQualityGate()
                    if(qg.status != 'OK'){
                        error "‚ùåPipeline failed because Quality Gate status is: ${qg.status}"
                    }else{
                        echo "‚úÖ Quality Gate passed with status: ${qg.status}"
                    }
                  }
                }
            }
        }

        stage('Docker Login'){
	        steps{
		        echo "üîê Logging into DockerHub..."
                script{
                    withCredentials([usernamePassword(credentialsId:"${DOCKERHUB_CREDENTIALS}",usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]){
                        sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                    }
                    echo "‚úÖ Docker login successful."
                }
	        }
        }

        stage('Docker Build & Tag'){
            steps{
                script{
                    def  commitHash = sh(script: "git rev-parse --short HEAD", returnStdout : true).trim()

                    env.IMAGE_TAG = "build-${env.BUILD_NUMBER}-${commitHash}"
                    env.DOCKER_IMAGE = "${IMAGE_NAME}:${env.IMAGE_TAG}"


                    echo "üê≥ Building Docker image ${env.DOCKER_IMAGE}..."
                    sh "docker build -t ${env.DOCKER_IMAGE} ."
                    echo "‚úÖ Docker image built and tagged successfully."
                }
            }
        }

        stage('Docker push'){
            steps{
                script{
                    echo "‚¨ÜÔ∏è Pushing Docker image ${env.DOCKER_IMAGE}..."
                    sh "docker push ${env.DOCKER_IMAGE}"
                    echo "‚úÖ Docker image pushed successfully"
                }
            }
        }

        stage('Docker Logout'){
            steps{
                echo "üö™ Logging out from DockerHub..."
                sh "docker logout"
                echo "‚úÖ Docker logout successful"
            }
        }
    }

    post {
        success {
            script{notify('SUCCESS')}
        }
        failure {
            script{notify('FAILURE')}
        }
        aborted {
            script{notify('ABORTED')}
        }
    }
}
